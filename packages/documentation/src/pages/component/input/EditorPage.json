{
  "features": [
    {
      "name": "Content Editing",
      "description": "Allows users to edit rich text in a content-editable div. Supports real-time content manipulation and selection."
    },
    {
      "name": "Dynamic State Management",
      "description": "Synchronizes the content with internal state using the `useInput` hook, keeping the model's state up to date as content changes."
    },
    {
      "name": "Toolbar Integration",
      "description": "Integrates with a toolbar component that provides text formatting and other editing controls."
    },
    {
      "name": "Tabs Navigation",
      "description": "Provides a tab interface for switching between different editing modes such as text formatting, font size, and color."
    },
    {
      "name": "Editable & Non-Editable Modes",
      "description": "Allows toggling between editable and non-editable modes based on the current selected tab."
    },
    {
      "name": "Inspector View",
      "description": "Displays an inspector view when content is not editable, allowing users to inspect content properties and make adjustments."
    },
    {
      "name": "Page State Handling",
      "description": "Manages the state of the current page to enable or disable content editing based on the selected tab."
    }
  ],
  "props": [
    {
      "name": "name",
      "type": "string",
      "description": "The name of the editor, useful for form submissions or identifying the editor within a form."
    },
    {
      "name": "disabled",
      "type": "boolean",
      "description": "If true, the editor is disabled and cannot be interacted with by the user."
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "description": "Inline CSS styling to apply to the editor component."
    },
    {
      "name": "onModel",
      "type": "function",
      "description": "A callback function that is called when the model's state changes. Receives the model as an argument."
    },
    {
      "name": "value",
      "type": "EditorModel",
      "description": "The current value of the editor, represented as an `EditorModel` instance that holds both HTML and text content."
    },
    {
      "name": "onChange",
      "type": "function (value: EditorModel) => void",
      "description": "A callback function that is triggered when the editor content changes. Receives the updated `EditorModel` as an argument."
    },
    {
      "name": "standalone",
      "type": "boolean",
      "description": "Indicates whether the editor is used independently (outside a form context). Defaults to false."
    }
  ]
}
